<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>
  <script>
    var originalListContent;

    function googleTranslateElementInit() {
      new google.translate.TranslateElement({ pageLanguage: 'en', includedLanguages: 'zh-CN,en' }, 'google_translate_element');
      originalListContent = document.getElementById('product-list').innerHTML;
    }

    function translateList(language) {
      var listContent = originalListContent;
      if (language === 'zh-CN') {
        google.translate.TranslateElement.getInstance().translate(listContent, 'zh-CN', function (translatedText) {
          document.getElementById('product-list').innerHTML = translatedText;
        });
      } else {
        document.getElementById('product-list').innerHTML = listContent;
      }
    }

    function toggleTranslation() {
      var language = google.translate.TranslateElement.getInstance().getTargetLanguage();
      if (language === 'zh-CN') {
        translateList('en');
      } else {
        translateList('zh-CN');
      }
    }
  </script>
</head>
<body>
  <%- include('header') %>
  <style>
    body {
      height: 2000px;
      transition: background-color 0.3s ease;
    }

    .title {
      text-align: center;
      margin-top: 150px;
    }
  </style>
    
    
   
     
    <style>
        .highlight-heading {
          padding: 30px;
          text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
          font-weight: 700;
          font-family: Arial, sans-serif;
          font-size: 56px;
          color: #333;
         
          border-radius: 10px;
          text-align: center;
        }
      
        @media screen and (max-width: 480px) {
          .highlight-heading {
            font-size: 24px;
            padding: 20px;
          }
        }
      </style>
      
      <h1 class="highlight-heading">Welcome to My Website</h1>
      
    






<style>
  .resume-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
  }

  .resume-content {
    text-align: center;
    font-size: 24px;
    font-family: 'Arial', sans-serif;
    color: white;
  }

  @media (max-width: 768px) {
    .resume-content {
      font-size: 18px;
      padding-right: 10px;
      padding-left: 10px;
    }
  }
  p {
  padding: 10px;
  padding-right: 40px;
  padding-left: 40px;
  font-weight: bold;
  font-family: "Oswald", sans-serif;
}
li {
  color: white;
}

</style>

<div class="resume-container">
  <div class="resume-content">
    
    <p style="color: rgb(124, 181, 181); font-size: 1.5rem;">Disappearing text!</p>



  </div>
</div>



<div class="resume-container">
  <div class="resume-content" style="text-align: left;">
    
    <p>
      <p>
        <ul>
          <li>Results-driven JavaScript programmer</li>
          <li>Strong command over front-end development</li>
          <li>Passion for creating interactive and responsive web applications</li>
          <li>Proficient in JavaScript frameworks and libraries (React, Angular)</li>
          <li>Skilled in building robust user interfaces</li>
          <li>Experience in developing RESTful APIs and integrating them with Node.js</li>
          <li>Capable of optimizing code performance</li>
          <li>Proficient in troubleshooting complex bugs</li>
          <li>Collaborative team player</li>
          <li>Excellent problem-solving abilities</li>
          <li>Constant desire to learn and adapt to new technologies and industry best practices</li>
      </ul>
    </p>
    </span>
      
  </p>
  
  </div>
</div>



<h1 class="highlight-heading" style="color: white; text-shadow: none;"></h1>
<h1 class="highlight-heading" style="color: white; text-shadow: none;"></h1>


<div class="resume-container">
  <div class="resume-content">
    
    <p style="color: rgb(124, 181, 181);">I possess strong IT skills in front-end web development, specializing in React.js, TypeScript, jQuery, and HTML5/CSS3.

      With expertise in React.js and TypeScript, I excel at building interactive and dynamic user interfaces. Leveraging React components and TypeScript's type-checking capabilities, I ensure efficient state management and enhance code reliability.
      
      Additionally, I have a solid understanding of jQuery, a widely-used JavaScript library. I leverage jQuery to streamline tasks like event handling, animation, and AJAX requests, enhancing the functionality and user experience of web applications.
      
      </p>
  </div>
</div>

 
  <%- include('me') %>
  <p></p>
  <p></p>
  <p></p>
  <%- include('skill') %>
  <script>
    class ColorChanger {
      constructor() {
        this.body = document.body;
        this.originalBackgroundColor = getComputedStyle(this.body).backgroundColor;
        this.scrollHandler = this.scrollHandler.bind(this);
        this.isColorChanged = false;
        this.previousScrollPosition = 0;
      }

      scrollHandler() {
        const scrollPosition = window.scrollY;
        const threshold = 150; // Adjust this value as needed

        if (scrollPosition > threshold && !this.isColorChanged) {
          this.changeBackgroundColor('rgb(124, 181, 181)');
          this.isColorChanged = true;
        } else if (scrollPosition <= threshold && this.isColorChanged) {
          this.changeBackgroundColor(this.originalBackgroundColor);
          this.isColorChanged = false;
        }

        if (scrollPosition < this.previousScrollPosition && this.isColorChanged) {
          this.changeBackgroundColor(this.originalBackgroundColor);
          this.isColorChanged = false;
        }

        this.previousScrollPosition = scrollPosition;
      }

      changeBackgroundColor(color) {
        this.body.style.backgroundColor = color;
      }

      start() {
        window.addEventListener('scroll', this.scrollHandler);
        window.addEventListener('scroll', this.resetColorHandler.bind(this));
      }

      stop() {
        window.removeEventListener('scroll', this.scrollHandler);
        window.removeEventListener('scroll', this.resetColorHandler.bind(this));
      }

      resetColorHandler() {
        const scrollPosition = window.scrollY;
        const resetThreshold = 1000; // Adjust this value as needed

        if (scrollPosition > resetThreshold) {
          this.changeBackgroundColor(this.originalBackgroundColor);
          this.isColorChanged = false;
        }
      }
    }

    // Wait for DOM content to load
    document.addEventListener('DOMContentLoaded', function() {
      // Example usage
      const colorChanger = new ColorChanger();
      colorChanger.start();
    });
  </script>
  <script>
    function translatePage(language) {
      if (typeof google !== 'undefined' && google.translate) {
        google.translate.TranslateElement.getInstance().changeLanguage(language);
        toggleTranslation();
      }
    }
  </script>
  
   <div id="google_translate_element"></div>
  
    <%- include('footer') %>
</body>
</html>